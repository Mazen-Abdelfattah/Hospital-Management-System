import pypyodbc as odbc
import bcrypt
import sys


DRIVER_NAME = 'SQL SERVER'
SERVER_NAME = 'DESKTOP-36GS4NO\SQLEXPRESS'
DATABASE_NAME = 'HospitalManagementSystem'

connection_string = f"""
    DRIVER={{{DRIVER_NAME}}};
    SERVER={SERVER_NAME};
    DATABASE={DATABASE_NAME};
    Trust_Connection=yes;
"""


try:
    conn = odbc.connect(connection_string)
    cursor = conn.cursor()
except odbc.DatabaseError as e:
    print(f"Database connection error: {e}")
    sys.exit()


def hash_password(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())


def verify_password(hashed_password, password):
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password)


def add_admin():
    print("Sign up as a new Admin:")
    username = input("Enter username: ")
    password = input("Enter password: ")
    hashed_password = hash_password(password)
    name = input("Enter name: ")
    
    query = "INSERT INTO Admin (username, password, name) VALUES (?, ?, ?)"
    cursor.execute(query, (username, hashed_password, name))
    conn.commit()
    print("Admin added successfully.")


def admin_login():
    print("Admin Login:")
    username = input("Enter username: ")
    password = input("Enter password: ")
    
    query = "SELECT password FROM Admin WHERE username = ?"
    cursor.execute(query, (username,))
    result = cursor.fetchone()
    if result and verify_password(result[0], password):
        print("Login successful.")
    else:
        print("Invalid username or password.")


def update_user_details():
    print("Update a user's details:")
    user_id = input("Enter user ID: ")
    new_name = input("Enter new name: ")

    update_query = "UPDATE Users SET name = ? WHERE user_id = ?"
    cursor.execute(update_query, (new_name, user_id))
    conn.commit()
    print("User details updated successfully.")


def add_patient():
    print("\nAdd a patient:")
    name = input("Enter patient's name: ")
    gender = input("Enter patient's gender (M/F): ")
    date_of_birth = input("Enter patient's date of birth (YYYY-MM-DD): ")
    address = input("Enter patient's address: ")
    phone_number = input("Enter patient's phone number: ")
    emergency_contact_name = input("Enter emergency contact name: ")
    emergency_contact_phone = input("Enter emergency contact phone number: ")
    insurance_information = input("Enter insurance information: ")

    insert_query = """
    INSERT INTO Patient (name, gender, date_of_birth, address, phone_number, emergency_contact_name,
                         emergency_contact_phone, insurance_information)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """
    cursor.execute(insert_query, (name, gender, date_of_birth, address, phone_number,
                                  emergency_contact_name, emergency_contact_phone, insurance_information))
    conn.commit()
    print("Patient added successfully.")


def admin_actions():
    while True:
        print("\nAdmin's Actions:")
        print("1. Sign up as a new Admin")
        print("2. Login")
        print("3. Update a user's details")
        print("4. Add a Patient")
        print("5. Close the application")
        
        choice = input("Enter your choice: ")
        
        if choice == '1':
            add_admin()
        elif choice == '2':
            admin_login()
        elif choice == '3':
            update_user_details()
        elif choice == '4':
            add_patient()
        elif choice == '5':
            print("Closing the application.")
            sys.exit()
        else:
            print("Invalid choice. Please try again.")


def main():
    while True:
        print("\nWelcome to the Hospital Management System!")
        print("Choose user type:")
        print("1. Admin")
        print("2. Close the application")

        user_type = input("Enter your choice: ")

        if user_type == '1':
            admin_actions()
        elif user_type == '2':
            print("Closing the application.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
